Выделите аспекты приложения, которые
могут изменяться, и отделите их от тех,
которые всегда остаются постоянными.

Другая формулировка того же принципа: выделите пере-
менные составляющие и инкапсулируйте их, чтобы позднее
их можно было изменять или расширять без воздействия на
постоянные составляющие.

Чтобы отделить «переменное от постоянного», мы создадим два набора классов (со-
вершенно независимых от Duck): один для fly, другой для quack. Каждый набор клас-
сов содержит реализацию соответствующего поведения.
Мы знаем, что fly() и quack() — части класса Duck,
изменяющиеся в зависимости от субкласса.
Чтобы отделить эти аспекты поведения от класса Duck, мы
выносим оба метода за пределы класса Duck и создаем новый
набор классов для представления каждого аспекта.

Отныне аспекты поведе-
ния Duck будут находиться
в отдельных классах,
реализующих интерфейс
конкретного аспекта.
В этом случае классам
Duck не нужно знать под-
робности реализации своих
аспектов поведения.

Для представления каждого аспекта поведения (например,
FlyBehavior или QuackBehavior) будет использоваться интер-
фейс, а каждая реализация аспекта поведения будет представ-
лена реализацией этого интерфейса.